
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b18  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000cdc  08000cdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ce8  08000ce8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08000ce8  08000ce8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ce8  08000ce8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cec  08000cec  00010cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000014  08000d04  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000d04  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001708  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e3  00000000  00000000  0002174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00021d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000130  00000000  00000000  00021ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d78  00000000  00000000  00021fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e9a  00000000  00000000  00024d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b865  00000000  00000000  00026bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003244f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004ec  00000000  00000000  000324a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000cc4 	.word	0x08000cc4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08000cc4 	.word	0x08000cc4

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <I2C1_GPIOInit>:
 * SDA->PB7
 */
I2C_Handle_t I2C1Handle;

void I2C1_GPIOInit()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;
	I2CPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <I2C1_GPIOInit+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTERNET;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOutType = GPIO_OP_TYPE_OPENDRAIN;
 8000222:	2301      	movs	r3, #1
 8000224:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdCtrl = GPIO_PUPDCTRL_PULLUP;
 8000226:	2301      	movs	r3, #1
 8000228:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 800022a:	2304      	movs	r3, #4
 800022c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_OP_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 8000232:	2306      	movs	r3, #6
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f949 	bl	80004d0 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 800023e:	2307      	movs	r3, #7
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f943 	bl	80004d0 <GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <I2C1_Init>:
void I2C1_Init()
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <I2C1_Init+0x2c>)
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <I2C1_Init+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACK_Control = I2C_ACK_EN;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <I2C1_Init+0x2c>)
 8000264:	2201      	movs	r2, #1
 8000266:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_Device_Address = 0x42;
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <I2C1_Init+0x2c>)
 800026a:	2242      	movs	r2, #66	; 0x42
 800026c:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FM_DutyCycle = I2C_FM_DUTY_2;
 800026e:	4b05      	ldr	r3, [pc, #20]	; (8000284 <I2C1_Init+0x2c>)
 8000270:	2200      	movs	r2, #0
 8000272:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCL_Speed = I2C_SCL_SPEED_NORMAL;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <I2C1_Init+0x2c>)
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <I2C1_Init+0x34>)
 8000278:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <I2C1_Init+0x2c>)
 800027c:	f000 fb14 	bl	80008a8 <I2C_Init>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000030 	.word	0x20000030
 8000288:	40005400 	.word	0x40005400
 800028c:	000186a0 	.word	0x000186a0

08000290 <main>:

int main()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	char user_data[] = "Hello World";
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <main+0x40>)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//I2C Pin initialize
	I2C1_GPIOInit();
 80002a0:	f7ff ffb8 	bl	8000214 <I2C1_GPIOInit>

	//I2C Peripheral initialize
	I2C1_Init();
 80002a4:	f7ff ffd8 	bl	8000258 <I2C1_Init>

	//I2C1 Enable
	I2C_Peripheral_Control(I2C1, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	480a      	ldr	r0, [pc, #40]	; (80002d4 <main+0x44>)
 80002ac:	f000 fc6a 	bl	8000b84 <I2C_Peripheral_Control>

	//Send data to slave
	I2C_MasterSendData(&I2C1Handle, user_data, strlen((char*)user_data), SLAVE_ADDR);
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ffa6 	bl	8000204 <strlen>
 80002b8:	4602      	mov	r2, r0
 80002ba:	1d39      	adds	r1, r7, #4
 80002bc:	2368      	movs	r3, #104	; 0x68
 80002be:	4806      	ldr	r0, [pc, #24]	; (80002d8 <main+0x48>)
 80002c0:	f000 fbea 	bl	8000a98 <I2C_MasterSendData>
	return 0;
 80002c4:	2300      	movs	r3, #0
}
 80002c6:	4618      	mov	r0, r3
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	08000cdc 	.word	0x08000cdc
 80002d4:	40005400 	.word	0x40005400
 80002d8:	20000030 	.word	0x20000030

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 fcb7 	bl	8000c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffbf 	bl	8000290 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000320:	08000cf0 	.word	0x08000cf0
  ldr r2, =_sbss
 8000324:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000328:	2000003c 	.word	0x2000003c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <GPIO_PCLK>:
 *
 * @note					-> none
 *
 */
void GPIO_PCLK(GPIOx_Reg_t *pGPIOx, uint8_t EnDi)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	if(EnDi){	//EnDi == ENABLE (1)
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d057      	beq.n	80003f2 <GPIO_PCLK+0xc2>
		if	   (pGPIOx == GPIOA)	GPIOA_PCLK_EN();
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a59      	ldr	r2, [pc, #356]	; (80004ac <GPIO_PCLK+0x17c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PCLK+0x28>
 800034a:	4b59      	ldr	r3, [pc, #356]	; (80004b0 <GPIO_PCLK+0x180>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a58      	ldr	r2, [pc, #352]	; (80004b0 <GPIO_PCLK+0x180>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOE)	GPIOE_PCLK_DI();
		else if(pGPIOx == GPIOF)	GPIOF_PCLK_DI();
		else if(pGPIOx == GPIOG)	GPIOG_PCLK_DI();
		else if(pGPIOx == GPIOH)	GPIOH_PCLK_DI();
	}
}
 8000356:	e0a3      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOB)	GPIOB_PCLK_EN();
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a56      	ldr	r2, [pc, #344]	; (80004b4 <GPIO_PCLK+0x184>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PCLK+0x3e>
 8000360:	4b53      	ldr	r3, [pc, #332]	; (80004b0 <GPIO_PCLK+0x180>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a52      	ldr	r2, [pc, #328]	; (80004b0 <GPIO_PCLK+0x180>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e098      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOC)	GPIOC_PCLK_EN();
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a51      	ldr	r2, [pc, #324]	; (80004b8 <GPIO_PCLK+0x188>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PCLK+0x54>
 8000376:	4b4e      	ldr	r3, [pc, #312]	; (80004b0 <GPIO_PCLK+0x180>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a4d      	ldr	r2, [pc, #308]	; (80004b0 <GPIO_PCLK+0x180>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e08d      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOD)	GPIOD_PCLK_EN();
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a4d      	ldr	r2, [pc, #308]	; (80004bc <GPIO_PCLK+0x18c>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PCLK+0x6a>
 800038c:	4b48      	ldr	r3, [pc, #288]	; (80004b0 <GPIO_PCLK+0x180>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a47      	ldr	r2, [pc, #284]	; (80004b0 <GPIO_PCLK+0x180>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e082      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOE)	GPIOE_PCLK_EN();
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a48      	ldr	r2, [pc, #288]	; (80004c0 <GPIO_PCLK+0x190>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PCLK+0x80>
 80003a2:	4b43      	ldr	r3, [pc, #268]	; (80004b0 <GPIO_PCLK+0x180>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a42      	ldr	r2, [pc, #264]	; (80004b0 <GPIO_PCLK+0x180>)
 80003a8:	f043 0310 	orr.w	r3, r3, #16
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e077      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOF)	GPIOF_PCLK_EN();
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a44      	ldr	r2, [pc, #272]	; (80004c4 <GPIO_PCLK+0x194>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PCLK+0x96>
 80003b8:	4b3d      	ldr	r3, [pc, #244]	; (80004b0 <GPIO_PCLK+0x180>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a3c      	ldr	r2, [pc, #240]	; (80004b0 <GPIO_PCLK+0x180>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e06c      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOG)	GPIOG_PCLK_EN();
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <GPIO_PCLK+0x198>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PCLK+0xac>
 80003ce:	4b38      	ldr	r3, [pc, #224]	; (80004b0 <GPIO_PCLK+0x180>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a37      	ldr	r2, [pc, #220]	; (80004b0 <GPIO_PCLK+0x180>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e061      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOH)	GPIOH_PCLK_EN();
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a3b      	ldr	r2, [pc, #236]	; (80004cc <GPIO_PCLK+0x19c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d15d      	bne.n	80004a0 <GPIO_PCLK+0x170>
 80003e4:	4b32      	ldr	r3, [pc, #200]	; (80004b0 <GPIO_PCLK+0x180>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a31      	ldr	r2, [pc, #196]	; (80004b0 <GPIO_PCLK+0x180>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e056      	b.n	80004a0 <GPIO_PCLK+0x170>
		if	   (pGPIOx == GPIOA)	GPIOA_PCLK_DI();
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a2d      	ldr	r2, [pc, #180]	; (80004ac <GPIO_PCLK+0x17c>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PCLK+0xd8>
 80003fa:	4b2d      	ldr	r3, [pc, #180]	; (80004b0 <GPIO_PCLK+0x180>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a2c      	ldr	r2, [pc, #176]	; (80004b0 <GPIO_PCLK+0x180>)
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e04b      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOB)	GPIOB_PCLK_DI();
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a2a      	ldr	r2, [pc, #168]	; (80004b4 <GPIO_PCLK+0x184>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PCLK+0xee>
 8000410:	4b27      	ldr	r3, [pc, #156]	; (80004b0 <GPIO_PCLK+0x180>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a26      	ldr	r2, [pc, #152]	; (80004b0 <GPIO_PCLK+0x180>)
 8000416:	f023 0302 	bic.w	r3, r3, #2
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e040      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOC)	GPIOC_PCLK_DI();
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <GPIO_PCLK+0x188>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PCLK+0x104>
 8000426:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <GPIO_PCLK+0x180>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <GPIO_PCLK+0x180>)
 800042c:	f023 0304 	bic.w	r3, r3, #4
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e035      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOD)	GPIOD_PCLK_DI();
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a21      	ldr	r2, [pc, #132]	; (80004bc <GPIO_PCLK+0x18c>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PCLK+0x11a>
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <GPIO_PCLK+0x180>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a1b      	ldr	r2, [pc, #108]	; (80004b0 <GPIO_PCLK+0x180>)
 8000442:	f023 0308 	bic.w	r3, r3, #8
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	e02a      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOE)	GPIOE_PCLK_DI();
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a1c      	ldr	r2, [pc, #112]	; (80004c0 <GPIO_PCLK+0x190>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PCLK+0x130>
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <GPIO_PCLK+0x180>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <GPIO_PCLK+0x180>)
 8000458:	f023 0310 	bic.w	r3, r3, #16
 800045c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045e:	e01f      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOF)	GPIOF_PCLK_DI();
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a18      	ldr	r2, [pc, #96]	; (80004c4 <GPIO_PCLK+0x194>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PCLK+0x146>
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <GPIO_PCLK+0x180>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046c:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <GPIO_PCLK+0x180>)
 800046e:	f023 0320 	bic.w	r3, r3, #32
 8000472:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000474:	e014      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOG)	GPIOG_PCLK_DI();
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a13      	ldr	r2, [pc, #76]	; (80004c8 <GPIO_PCLK+0x198>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PCLK+0x15c>
 800047e:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <GPIO_PCLK+0x180>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000482:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <GPIO_PCLK+0x180>)
 8000484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000488:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048a:	e009      	b.n	80004a0 <GPIO_PCLK+0x170>
		else if(pGPIOx == GPIOH)	GPIOH_PCLK_DI();
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a0f      	ldr	r2, [pc, #60]	; (80004cc <GPIO_PCLK+0x19c>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d105      	bne.n	80004a0 <GPIO_PCLK+0x170>
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <GPIO_PCLK+0x180>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <GPIO_PCLK+0x180>)
 800049a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800049e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40020000 	.word	0x40020000
 80004b0:	40023800 	.word	0x40023800
 80004b4:	40020400 	.word	0x40020400
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40021400 	.word	0x40021400
 80004c8:	40021800 	.word	0x40021800
 80004cc:	40021c00 	.word	0x40021c00

080004d0 <GPIO_Init>:
 *
 * @note					-> none
 *
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	//0. Enable peripheral clk
	GPIO_PCLK(pGPIOHandle->pGPIOx, ENABLE);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2101      	movs	r1, #1
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ff26 	bl	8000330 <GPIO_PCLK>

	//1. Config pin mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode  <=  GPIO_MODE_ANLOG)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	795b      	ldrb	r3, [r3, #5]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d81f      	bhi.n	800052c <GPIO_Init+0x5c>
	{
		//Non-interrupt/normal modes
		pGPIOHandle->pGPIOx->MODER &= ~(0x3  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));    //clearing bits/////////////////////////////no 2 in video/////////////////////////////////////////
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	791b      	ldrb	r3, [r3, #4]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	2103      	movs	r1, #3
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	43db      	mvns	r3, r3
 8000500:	4619      	mov	r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	400a      	ands	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber))); //Shifted by double times as each mode 2-bits
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	795b      	ldrb	r3, [r3, #5]
 8000514:	4619      	mov	r1, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	4619      	mov	r1, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	430a      	orrs	r2, r1
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e0c9      	b.n	80006c0 <GPIO_Init+0x1f0>
	}
	else
	{
		//Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	795b      	ldrb	r3, [r3, #5]
 8000530:	2b04      	cmp	r3, #4
 8000532:	d117      	bne.n	8000564 <GPIO_Init+0x94>
		{
			//i) Configure FTSR
			EXTI->FTSR	|= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b47      	ldr	r3, [pc, #284]	; (8000654 <GPIO_Init+0x184>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a43      	ldr	r2, [pc, #268]	; (8000654 <GPIO_Init+0x184>)
 8000546:	430b      	orrs	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]
			//Clear RTSR
			EXTI->RTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054a:	4b42      	ldr	r3, [pc, #264]	; (8000654 <GPIO_Init+0x184>)
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	7912      	ldrb	r2, [r2, #4]
 8000552:	4611      	mov	r1, r2
 8000554:	2201      	movs	r2, #1
 8000556:	408a      	lsls	r2, r1
 8000558:	43d2      	mvns	r2, r2
 800055a:	4611      	mov	r1, r2
 800055c:	4a3d      	ldr	r2, [pc, #244]	; (8000654 <GPIO_Init+0x184>)
 800055e:	400b      	ands	r3, r1
 8000560:	6093      	str	r3, [r2, #8]
 8000562:	e035      	b.n	80005d0 <GPIO_Init+0x100>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b05      	cmp	r3, #5
 800056a:	d117      	bne.n	800059c <GPIO_Init+0xcc>
		{
			//i) Configure RTSR
			EXTI->RTSR	|= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800056c:	4b39      	ldr	r3, [pc, #228]	; (8000654 <GPIO_Init+0x184>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	4611      	mov	r1, r2
 800057c:	4a35      	ldr	r2, [pc, #212]	; (8000654 <GPIO_Init+0x184>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6093      	str	r3, [r2, #8]
			//Clear FTSR
			EXTI->FTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000582:	4b34      	ldr	r3, [pc, #208]	; (8000654 <GPIO_Init+0x184>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a2f      	ldr	r2, [pc, #188]	; (8000654 <GPIO_Init+0x184>)
 8000596:	400b      	ands	r3, r1
 8000598:	60d3      	str	r3, [r2, #12]
 800059a:	e019      	b.n	80005d0 <GPIO_Init+0x100>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b06      	cmp	r3, #6
 80005a2:	d115      	bne.n	80005d0 <GPIO_Init+0x100>
		{
			//i) Configure RTSR & FTSR
			EXTI->RTSR	|= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <GPIO_Init+0x184>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <GPIO_Init+0x184>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR	|= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <GPIO_Init+0x184>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <GPIO_Init+0x184>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	60d3      	str	r3, [r2, #12]
		}

		//ii)  Config GPIO port selection in SYSCFG_EXTICR[0-3]
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/4;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	73fb      	strb	r3, [r7, #15]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%4;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	f003 0303 	and.w	r3, r3, #3
 80005e0:	73bb      	strb	r3, [r7, #14]

		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <GPIO_Init+0x188>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d045      	beq.n	8000678 <GPIO_Init+0x1a8>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1a      	ldr	r2, [pc, #104]	; (800065c <GPIO_Init+0x18c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d02b      	beq.n	800064e <GPIO_Init+0x17e>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <GPIO_Init+0x190>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d024      	beq.n	800064a <GPIO_Init+0x17a>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <GPIO_Init+0x194>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d01d      	beq.n	8000646 <GPIO_Init+0x176>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a16      	ldr	r2, [pc, #88]	; (8000668 <GPIO_Init+0x198>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d016      	beq.n	8000642 <GPIO_Init+0x172>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a14      	ldr	r2, [pc, #80]	; (800066c <GPIO_Init+0x19c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d00f      	beq.n	800063e <GPIO_Init+0x16e>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <GPIO_Init+0x1a0>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d008      	beq.n	800063a <GPIO_Init+0x16a>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a11      	ldr	r2, [pc, #68]	; (8000674 <GPIO_Init+0x1a4>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d101      	bne.n	8000636 <GPIO_Init+0x166>
 8000632:	2307      	movs	r3, #7
 8000634:	e021      	b.n	800067a <GPIO_Init+0x1aa>
 8000636:	2300      	movs	r3, #0
 8000638:	e01f      	b.n	800067a <GPIO_Init+0x1aa>
 800063a:	2306      	movs	r3, #6
 800063c:	e01d      	b.n	800067a <GPIO_Init+0x1aa>
 800063e:	2305      	movs	r3, #5
 8000640:	e01b      	b.n	800067a <GPIO_Init+0x1aa>
 8000642:	2304      	movs	r3, #4
 8000644:	e019      	b.n	800067a <GPIO_Init+0x1aa>
 8000646:	2303      	movs	r3, #3
 8000648:	e017      	b.n	800067a <GPIO_Init+0x1aa>
 800064a:	2302      	movs	r3, #2
 800064c:	e015      	b.n	800067a <GPIO_Init+0x1aa>
 800064e:	2301      	movs	r3, #1
 8000650:	e013      	b.n	800067a <GPIO_Init+0x1aa>
 8000652:	bf00      	nop
 8000654:	40013c00 	.word	0x40013c00
 8000658:	40020000 	.word	0x40020000
 800065c:	40020400 	.word	0x40020400
 8000660:	40020800 	.word	0x40020800
 8000664:	40020c00 	.word	0x40020c00
 8000668:	40021000 	.word	0x40021000
 800066c:	40021400 	.word	0x40021400
 8000670:	40021800 	.word	0x40021800
 8000674:	40021c00 	.word	0x40021c00
 8000678:	2300      	movs	r3, #0
 800067a:	737b      	strb	r3, [r7, #13]
		SYSCFG_PCLK_EN();
 800067c:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <GPIO_Init+0x31c>)
 800067e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000680:	4a5a      	ldr	r2, [pc, #360]	; (80007ec <GPIO_Init+0x31c>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= portCode << 4*temp2;
 8000688:	4a59      	ldr	r2, [pc, #356]	; (80007f0 <GPIO_Init+0x320>)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3302      	adds	r3, #2
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	7b79      	ldrb	r1, [r7, #13]
 8000694:	7bbb      	ldrb	r3, [r7, #14]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	4618      	mov	r0, r3
 800069e:	4954      	ldr	r1, [pc, #336]	; (80007f0 <GPIO_Init+0x320>)
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	4302      	orrs	r2, r0
 80006a4:	3302      	adds	r3, #2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//iii) Enable EXTI interrupt delivery using IMR (Int. Mask Reg)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006aa:	4b52      	ldr	r3, [pc, #328]	; (80007f4 <GPIO_Init+0x324>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	7912      	ldrb	r2, [r2, #4]
 80006b2:	4611      	mov	r1, r2
 80006b4:	2201      	movs	r2, #1
 80006b6:	408a      	lsls	r2, r1
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a4e      	ldr	r2, [pc, #312]	; (80007f4 <GPIO_Init+0x324>)
 80006bc:	430b      	orrs	r3, r1
 80006be:	6013      	str	r3, [r2, #0]

	}

	//2. Config pin output type
	pGPIOHandle->pGPIOx->OTYPER  &=  ~(0x3  <<  (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));   //clear
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	2303      	movs	r3, #3
 80006ce:	408b      	lsls	r3, r1
 80006d0:	43db      	mvns	r3, r3
 80006d2:	4619      	mov	r1, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	400a      	ands	r2, r1
 80006da:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER  |=  (pGPIOHandle->GPIO_PinConfig.GPIO_PinOutType  <<  (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));    //set
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	685a      	ldr	r2, [r3, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7a1b      	ldrb	r3, [r3, #8]
 80006e6:	4619      	mov	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	791b      	ldrb	r3, [r3, #4]
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	605a      	str	r2, [r3, #4]

	//3. Config pin speed
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	400a      	ands	r2, r1
 8000716:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	799b      	ldrb	r3, [r3, #6]
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	791b      	ldrb	r3, [r3, #4]
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	430a      	orrs	r2, r1
 8000736:	609a      	str	r2, [r3, #8]

	//4. Config pin pull-up, pull-down
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68da      	ldr	r2, [r3, #12]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdCtrl  <<  (2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	79db      	ldrb	r3, [r3, #7]
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	4619      	mov	r1, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	60da      	str	r2, [r3, #12]

	//5. Config pin alternate functions
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode  ==  GPIO_MODE_ALTERNET)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d131      	bne.n	80007e2 <GPIO_Init+0x312>
	{
		uint8_t temp1, temp2;
		temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 8;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	08db      	lsrs	r3, r3, #3
 8000784:	733b      	strb	r3, [r7, #12]
		temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 8;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	72fb      	strb	r3, [r7, #11]
		pGPIOHandle->pGPIOx->AFR[temp1]  &=  ~(0xF  <<  (4 * temp2));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7b3a      	ldrb	r2, [r7, #12]
 8000796:	3208      	adds	r2, #8
 8000798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079c:	7afb      	ldrb	r3, [r7, #11]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	220f      	movs	r2, #15
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4618      	mov	r0, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	7b3a      	ldrb	r2, [r7, #12]
 80007b0:	4001      	ands	r1, r0
 80007b2:	3208      	adds	r2, #8
 80007b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1]  |=  (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode  <<  (4 * temp2));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7b3a      	ldrb	r2, [r7, #12]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7a5b      	ldrb	r3, [r3, #9]
 80007c8:	461a      	mov	r2, r3
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	4618      	mov	r0, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	7b3a      	ldrb	r2, [r7, #12]
 80007da:	4301      	orrs	r1, r0
 80007dc:	3208      	adds	r2, #8
 80007de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80007e2:	bf00      	nop
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40013c00 	.word	0x40013c00

080007f8 <I2C_PCLK>:

/*
 * Peripheral Clock setup
 */
void I2C_PCLK(I2C_Reg_t *pI2Cx, uint8_t EnDi)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	if(EnDi){	//EnDi == ENABLE (1)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d020      	beq.n	800084c <I2C_PCLK+0x54>
			if	   (pI2Cx == I2C1)		I2C1_PCLK_EN();
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <I2C_PCLK+0xa0>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d106      	bne.n	8000820 <I2C_PCLK+0x28>
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <I2C_PCLK+0xa4>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <I2C_PCLK+0xa4>)
 8000818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
	else{
			if	   (pI2Cx == I2C1)		I2C1_PCLK_DI();
			else if(pI2Cx == I2C2)		I2C2_PCLK_DI();
			else if(pI2Cx == I2C3)		I2C3_PCLK_DI();
		}
}
 800081e:	e035      	b.n	800088c <I2C_PCLK+0x94>
			else if(pI2Cx == I2C2)		I2C2_PCLK_EN();
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <I2C_PCLK+0xa8>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d106      	bne.n	8000836 <I2C_PCLK+0x3e>
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <I2C_PCLK+0xa4>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <I2C_PCLK+0xa4>)
 800082e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000834:	e02a      	b.n	800088c <I2C_PCLK+0x94>
			else if(pI2Cx == I2C3)		I2C3_PCLK_EN();
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a1a      	ldr	r2, [pc, #104]	; (80008a4 <I2C_PCLK+0xac>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d126      	bne.n	800088c <I2C_PCLK+0x94>
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <I2C_PCLK+0xa4>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <I2C_PCLK+0xa4>)
 8000844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
}
 800084a:	e01f      	b.n	800088c <I2C_PCLK+0x94>
			if	   (pI2Cx == I2C1)		I2C1_PCLK_DI();
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <I2C_PCLK+0xa0>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <I2C_PCLK+0x6a>
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <I2C_PCLK+0xa4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000858:	4a10      	ldr	r2, [pc, #64]	; (800089c <I2C_PCLK+0xa4>)
 800085a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800085e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000860:	e014      	b.n	800088c <I2C_PCLK+0x94>
			else if(pI2Cx == I2C2)		I2C2_PCLK_DI();
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <I2C_PCLK+0xa8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <I2C_PCLK+0x80>
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <I2C_PCLK+0xa4>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <I2C_PCLK+0xa4>)
 8000870:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000876:	e009      	b.n	800088c <I2C_PCLK+0x94>
			else if(pI2Cx == I2C3)		I2C3_PCLK_DI();
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <I2C_PCLK+0xac>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d105      	bne.n	800088c <I2C_PCLK+0x94>
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <I2C_PCLK+0xa4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	4a05      	ldr	r2, [pc, #20]	; (800089c <I2C_PCLK+0xa4>)
 8000886:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800088a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40005400 	.word	0x40005400
 800089c:	40023800 	.word	0x40023800
 80008a0:	40005800 	.word	0x40005800
 80008a4:	40005c00 	.word	0x40005c00

080008a8 <I2C_Init>:
/*
 * Init & DeInit
 */

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uint32_t tempreg=0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

	//0. Initiate clk
	I2C_PCLK(pI2CHandle->pI2Cx, ENABLE);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ff9c 	bl	80007f8 <I2C_PCLK>

	//1. Configure mode (standard, fast)
	//CCR calculation
	uint16_t ccr_val=0; tempreg=0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	817b      	strh	r3, [r7, #10]
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_NORMAL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a4c      	ldr	r2, [pc, #304]	; (8000a00 <I2C_Init+0x158>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d80f      	bhi.n	80008f2 <I2C_Init+0x4a>
	{
		//Standard mode
		ccr_val = (RCC_GetPclk1Value()/(2*pI2CHandle->I2C_Config.I2C_SCL_Speed));
 80008d2:	f000 f97b 	bl	8000bcc <RCC_GetPclk1Value>
 80008d6:	4602      	mov	r2, r0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e2:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_val & 0xFFF);
 80008e4:	897b      	ldrh	r3, [r7, #10]
 80008e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	e02d      	b.n	800094e <I2C_Init+0xa6>
	}
	else
	{
		//Fast mode
		tempreg |= (1 << I2C_CCR_FS);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f8:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FM_DutyCycle << I2C_CCR_DUTY);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	895b      	ldrh	r3, [r3, #10]
 80008fe:	039b      	lsls	r3, r3, #14
 8000900:	461a      	mov	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4313      	orrs	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

		if (pI2CHandle->I2C_Config.I2C_FM_DutyCycle == I2C_FM_DUTY_2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	895b      	ldrh	r3, [r3, #10]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10b      	bne.n	8000928 <I2C_Init+0x80>
			ccr_val = RCC_GetPclk1Value()/(3*pI2CHandle->I2C_Config.I2C_SCL_Speed);
 8000910:	f000 f95c 	bl	8000bcc <RCC_GetPclk1Value>
 8000914:	4601      	mov	r1, r0
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	fbb1 f3f3 	udiv	r3, r1, r3
 8000924:	817b      	strh	r3, [r7, #10]
 8000926:	e00c      	b.n	8000942 <I2C_Init+0x9a>
		else
			ccr_val = RCC_GetPclk1Value()/(25*pI2CHandle->I2C_Config.I2C_SCL_Speed);
 8000928:	f000 f950 	bl	8000bcc <RCC_GetPclk1Value>
 800092c:	4601      	mov	r1, r0
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	009a      	lsls	r2, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000940:	817b      	strh	r3, [r7, #10]

		tempreg |= (ccr_val & 0xFFF);
 8000942:	897b      	ldrh	r3, [r7, #10]
 8000944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4313      	orrs	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	61da      	str	r2, [r3, #28]

	//2. Configure speed
	tempreg=0;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPLLOutClk()/1000000U);
 800095a:	f000 f92f 	bl	8000bbc <RCC_GetPLLOutClk>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <I2C_Init+0x15c>)
 8000964:	fba3 2302 	umull	r2, r3, r3, r2
 8000968:	0c9b      	lsrs	r3, r3, #18
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800097a:	605a      	str	r2, [r3, #4]

	//3. Configure device address
	tempreg=0;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_Device_Address << 1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7a1b      	ldrb	r3, [r3, #8]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4313      	orrs	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
	tempreg |= (1<<14);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	609a      	str	r2, [r3, #8]

	//4. Enable acking
	tempreg=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACK_Control << I2C_CR1_ACK);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7a5b      	ldrb	r3, [r3, #9]
 80009a6:	029b      	lsls	r3, r3, #10
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]

	//5. Configure rise time for I2C
	if(pI2CHandle->I2C_Config.I2C_SCL_Speed <= I2C_SCL_SPEED_NORMAL)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <I2C_Init+0x158>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d809      	bhi.n	80009ce <I2C_Init+0x126>
		{
			//Standard mode
			tempreg = (RCC_GetPclk1Value()/1000000U)+1;
 80009ba:	f000 f907 	bl	8000bcc <RCC_GetPclk1Value>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <I2C_Init+0x15c>)
 80009c2:	fba2 2303 	umull	r2, r3, r2, r3
 80009c6:	0c9b      	lsrs	r3, r3, #18
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e00d      	b.n	80009ea <I2C_Init+0x142>
		}
		else
		{
			//Fast mode
			tempreg = ((RCC_GetPclk1Value() *300)/1000000000U)+1;
 80009ce:	f000 f8fd 	bl	8000bcc <RCC_GetPclk1Value>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	0a5b      	lsrs	r3, r3, #9
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <I2C_Init+0x160>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	09db      	lsrs	r3, r3, #7
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
		}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009f4:	621a      	str	r2, [r3, #32]

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	000186a0 	.word	0x000186a0
 8000a04:	431bde83 	.word	0x431bde83
 8000a08:	00044b83 	.word	0x00044b83

08000a0c <I2C_GenerateStartCondition>:

/*
 * Data send and receive
 */
static void I2C_GenerateStartCondition(I2C_Reg_t *pI2Cx)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <I2C_ExecuteAddressPhaseWrite>:
static void I2C_ExecuteAddressPhaseWrite(I2C_Reg_t *pI2Cx,uint8_t SlaveAddr)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);	//Reset 1st bit for Write
 8000a3e:	78fb      	ldrb	r3, [r7, #3]
 8000a40:	f023 0301 	bic.w	r3, r3, #1
 8000a44:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8000a46:	78fa      	ldrb	r2, [r7, #3]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <I2C_ClearADDRFlag>:
	SlaveAddr = SlaveAddr << 1;
	SlaveAddr |= (1); 	//Set 1st bit for Read
	pI2Cx->DR = SlaveAddr;
}
static void I2C_ClearADDRFlag(I2C_Reg_t *pI2Cx)	////????????????????????????????????????????????????
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint32_t tempRead = pI2Cx->SR1;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	60fb      	str	r3, [r7, #12]
	tempRead = pI2Cx->SR2;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	60fb      	str	r3, [r7, #12]
	(void)tempRead;
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <I2C_GenerateStopCondition>:
static void I2C_GenerateStopCondition(I2C_Reg_t *pI2Cx)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t SlaveAddr)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
 8000aa4:	70fb      	strb	r3, [r7, #3]
	//1. Generate start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ffae 	bl	8000a0c <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking SB flag in SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 8000ab0:	bf00      	nop
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f84f 	bl	8000b5c <I2C_GetFlagStatus>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f6      	beq.n	8000ab2 <I2C_MasterSendData+0x1a>

	//3. Send address of slave with R/Wb bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	78fa      	ldrb	r2, [r7, #3]
 8000aca:	4611      	mov	r1, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ffad 	bl	8000a2c <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm address phase is completed by checking ADDR flag in SR1
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 8000ad2:	bf00      	nop
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f83e 	bl	8000b5c <I2C_GetFlagStatus>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f6      	beq.n	8000ad4 <I2C_MasterSendData+0x3c>

	//5. Clear ADDR Flag-> Until ADDR cleared, SCL will be stretched
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff ffb4 	bl	8000a58 <I2C_ClearADDRFlag>

	//6. Send data until length becomes 0
	while(len > 0)
 8000af0:	e014      	b.n	8000b1c <I2C_MasterSendData+0x84>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));//Wait until TXE is set
 8000af2:	bf00      	nop
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f82e 	bl	8000b5c <I2C_GetFlagStatus>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f6      	beq.n	8000af4 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *(pTxBuffer);
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	3301      	adds	r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
		len--;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
	while(len > 0)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1e7      	bne.n	8000af2 <I2C_MasterSendData+0x5a>
	}

	//7. Wait for TXE=1 and BTF=1 before STOP condition
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE));//Wait until TXE is set
 8000b22:	bf00      	nop
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f816 	bl	8000b5c <I2C_GetFlagStatus>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0f6      	beq.n	8000b24 <I2C_MasterSendData+0x8c>
	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF));//Wait until BTE is set
 8000b36:	bf00      	nop
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f80c 	bl	8000b5c <I2C_GetFlagStatus>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f6      	beq.n	8000b38 <I2C_MasterSendData+0xa0>

	//8. Generate stop condition
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff92 	bl	8000a78 <I2C_GenerateStopCondition>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <I2C_GetFlagStatus>:

/*
 * Other peripheral control APIs
 */
uint8_t  I2C_GetFlagStatus(I2C_Reg_t *pI2Cx, uint32_t FlagName)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & FlagName) return FLAG_SET;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <I2C_GetFlagStatus+0x1a>
 8000b72:	2301      	movs	r3, #1
 8000b74:	e000      	b.n	8000b78 <I2C_GetFlagStatus+0x1c>
	else					  return FLAG_RESET;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <I2C_Peripheral_Control>:

void 	 I2C_Peripheral_Control(I2C_Reg_t *pI2Cx, uint8_t EnDi)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	if(EnDi == ENABLE)	pI2Cx->CR1 |=  (1 << I2C_CR1_PE);
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d106      	bne.n	8000ba4 <I2C_Peripheral_Control+0x20>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f043 0201 	orr.w	r2, r3, #1
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
	else				pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
}
 8000ba2:	e005      	b.n	8000bb0 <I2C_Peripheral_Control+0x2c>
	else				pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f023 0201 	bic.w	r2, r3, #1
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <RCC_GetPLLOutClk>:
 */

#include "../Inc/stm32f446xx_rcc_driver.h"

uint32_t RCC_GetPLLOutClk() /////////////////////////////////not implemented!
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <RCC_GetPclk1Value>:

uint16_t AHB_Prescaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_Prescaler[4] = {2,4,8,16};
uint32_t RCC_GetPclk1Value(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clk_src = (RCC->CFGR >> 2) & 0x3;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <RCC_GetPclk1Value+0x9c>)
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	089b      	lsrs	r3, r3, #2
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	727b      	strb	r3, [r7, #9]
	uint8_t ahbPrescaler, apb1Prescaler;

	if (clk_src == 0) 		SystemClk=16000000; //HSI
 8000be0:	7a7b      	ldrb	r3, [r7, #9]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <RCC_GetPclk1Value+0x20>
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <RCC_GetPclk1Value+0xa0>)
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	e00b      	b.n	8000c04 <RCC_GetPclk1Value+0x38>
	else if(clk_src == 1)	SystemClk=8000000;  //HSE
 8000bec:	7a7b      	ldrb	r3, [r7, #9]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d102      	bne.n	8000bf8 <RCC_GetPclk1Value+0x2c>
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <RCC_GetPclk1Value+0xa4>)
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e005      	b.n	8000c04 <RCC_GetPclk1Value+0x38>
	else if(clk_src == 2)	SystemClk=RCC_GetPLLOutClk();  //PLL
 8000bf8:	7a7b      	ldrb	r3, [r7, #9]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d102      	bne.n	8000c04 <RCC_GetPclk1Value+0x38>
 8000bfe:	f7ff ffdd 	bl	8000bbc <RCC_GetPLLOutClk>
 8000c02:	60f8      	str	r0, [r7, #12]

	//for AHB
	uint8_t temp = ((RCC->CFGR >>4) & 0xF);
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <RCC_GetPclk1Value+0x9c>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	091b      	lsrs	r3, r3, #4
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	723b      	strb	r3, [r7, #8]
	if(temp < 8) ahbPrescaler = 1;
 8000c12:	7a3b      	ldrb	r3, [r7, #8]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d802      	bhi.n	8000c1e <RCC_GetPclk1Value+0x52>
 8000c18:	2301      	movs	r3, #1
 8000c1a:	72fb      	strb	r3, [r7, #11]
 8000c1c:	e005      	b.n	8000c2a <RCC_GetPclk1Value+0x5e>
	else ahbPrescaler = AHB_Prescaler[temp-8];
 8000c1e:	7a3b      	ldrb	r3, [r7, #8]
 8000c20:	3b08      	subs	r3, #8
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <RCC_GetPclk1Value+0xa8>)
 8000c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c28:	72fb      	strb	r3, [r7, #11]

	//For APB1
	temp = (RCC->CFGR >> 10) & 0x7;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <RCC_GetPclk1Value+0x9c>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	0a9b      	lsrs	r3, r3, #10
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	723b      	strb	r3, [r7, #8]
	if(temp < 4) apb1Prescaler = 1;
 8000c38:	7a3b      	ldrb	r3, [r7, #8]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d802      	bhi.n	8000c44 <RCC_GetPclk1Value+0x78>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	72bb      	strb	r3, [r7, #10]
 8000c42:	e004      	b.n	8000c4e <RCC_GetPclk1Value+0x82>
	else apb1Prescaler = APB1_Prescaler[temp-4];
 8000c44:	7a3b      	ldrb	r3, [r7, #8]
 8000c46:	3b04      	subs	r3, #4
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <RCC_GetPclk1Value+0xac>)
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	72bb      	strb	r3, [r7, #10]

	pclk1 = (SystemClk/ahbPrescaler)/apb1Prescaler;
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c56:	7abb      	ldrb	r3, [r7, #10]
 8000c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5c:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	007a1200 	.word	0x007a1200
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000010 	.word	0x20000010

08000c7c <__libc_init_array>:
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4d0d      	ldr	r5, [pc, #52]	; (8000cb4 <__libc_init_array+0x38>)
 8000c80:	4c0d      	ldr	r4, [pc, #52]	; (8000cb8 <__libc_init_array+0x3c>)
 8000c82:	1b64      	subs	r4, r4, r5
 8000c84:	10a4      	asrs	r4, r4, #2
 8000c86:	2600      	movs	r6, #0
 8000c88:	42a6      	cmp	r6, r4
 8000c8a:	d109      	bne.n	8000ca0 <__libc_init_array+0x24>
 8000c8c:	4d0b      	ldr	r5, [pc, #44]	; (8000cbc <__libc_init_array+0x40>)
 8000c8e:	4c0c      	ldr	r4, [pc, #48]	; (8000cc0 <__libc_init_array+0x44>)
 8000c90:	f000 f818 	bl	8000cc4 <_init>
 8000c94:	1b64      	subs	r4, r4, r5
 8000c96:	10a4      	asrs	r4, r4, #2
 8000c98:	2600      	movs	r6, #0
 8000c9a:	42a6      	cmp	r6, r4
 8000c9c:	d105      	bne.n	8000caa <__libc_init_array+0x2e>
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca4:	4798      	blx	r3
 8000ca6:	3601      	adds	r6, #1
 8000ca8:	e7ee      	b.n	8000c88 <__libc_init_array+0xc>
 8000caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cae:	4798      	blx	r3
 8000cb0:	3601      	adds	r6, #1
 8000cb2:	e7f2      	b.n	8000c9a <__libc_init_array+0x1e>
 8000cb4:	08000ce8 	.word	0x08000ce8
 8000cb8:	08000ce8 	.word	0x08000ce8
 8000cbc:	08000ce8 	.word	0x08000ce8
 8000cc0:	08000cec 	.word	0x08000cec

08000cc4 <_init>:
 8000cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cc6:	bf00      	nop
 8000cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cca:	bc08      	pop	{r3}
 8000ccc:	469e      	mov	lr, r3
 8000cce:	4770      	bx	lr

08000cd0 <_fini>:
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	bf00      	nop
 8000cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd6:	bc08      	pop	{r3}
 8000cd8:	469e      	mov	lr, r3
 8000cda:	4770      	bx	lr
